// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: system/service/v1/user.proto

package servicev1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ApiResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ApiResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ApiResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ApiResponseMultiError, or
// nil if none found.
func (m *ApiResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ApiResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if len(errors) > 0 {
		return ApiResponseMultiError(errors)
	}

	return nil
}

// ApiResponseMultiError is an error wrapping multiple validation errors
// returned by ApiResponse.ValidateAll() if the designated constraints aren't met.
type ApiResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApiResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApiResponseMultiError) AllErrors() []error { return m }

// ApiResponseValidationError is the validation error returned by
// ApiResponse.Validate if the designated constraints aren't met.
type ApiResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApiResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApiResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApiResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApiResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApiResponseValidationError) ErrorName() string { return "ApiResponseValidationError" }

// Error satisfies the builtin error interface
func (e ApiResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApiResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApiResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApiResponseValidationError{}

// Validate checks the field values on UserInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserInfoMultiError, or nil
// if none found.
func (m *UserInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *UserInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Username

	// no validation rules for Email

	// no validation rules for Age

	if len(errors) > 0 {
		return UserInfoMultiError(errors)
	}

	return nil
}

// UserInfoMultiError is an error wrapping multiple validation errors returned
// by UserInfo.ValidateAll() if the designated constraints aren't met.
type UserInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserInfoMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserInfoMultiError) AllErrors() []error { return m }

// UserInfoValidationError is the validation error returned by
// UserInfo.Validate if the designated constraints aren't met.
type UserInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserInfoValidationError) ErrorName() string { return "UserInfoValidationError" }

// Error satisfies the builtin error interface
func (e UserInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserInfoValidationError{}

// Validate checks the field values on GetAllUsersReqVO with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetAllUsersReqVO) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAllUsersReqVO with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAllUsersReqVOMultiError, or nil if none found.
func (m *GetAllUsersReqVO) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAllUsersReqVO) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetAllUsersReqVOMultiError(errors)
	}

	return nil
}

// GetAllUsersReqVOMultiError is an error wrapping multiple validation errors
// returned by GetAllUsersReqVO.ValidateAll() if the designated constraints
// aren't met.
type GetAllUsersReqVOMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAllUsersReqVOMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAllUsersReqVOMultiError) AllErrors() []error { return m }

// GetAllUsersReqVOValidationError is the validation error returned by
// GetAllUsersReqVO.Validate if the designated constraints aren't met.
type GetAllUsersReqVOValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAllUsersReqVOValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAllUsersReqVOValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAllUsersReqVOValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAllUsersReqVOValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAllUsersReqVOValidationError) ErrorName() string { return "GetAllUsersReqVOValidationError" }

// Error satisfies the builtin error interface
func (e GetAllUsersReqVOValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAllUsersReqVO.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAllUsersReqVOValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAllUsersReqVOValidationError{}

// Validate checks the field values on GetAllUsersRespVO with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetAllUsersRespVO) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAllUsersRespVO with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAllUsersRespVOMultiError, or nil if none found.
func (m *GetAllUsersRespVO) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAllUsersRespVO) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetAllUsersRespVOValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetAllUsersRespVOValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetAllUsersRespVOValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetAllUsersRespVOMultiError(errors)
	}

	return nil
}

// GetAllUsersRespVOMultiError is an error wrapping multiple validation errors
// returned by GetAllUsersRespVO.ValidateAll() if the designated constraints
// aren't met.
type GetAllUsersRespVOMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAllUsersRespVOMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAllUsersRespVOMultiError) AllErrors() []error { return m }

// GetAllUsersRespVOValidationError is the validation error returned by
// GetAllUsersRespVO.Validate if the designated constraints aren't met.
type GetAllUsersRespVOValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAllUsersRespVOValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAllUsersRespVOValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAllUsersRespVOValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAllUsersRespVOValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAllUsersRespVOValidationError) ErrorName() string {
	return "GetAllUsersRespVOValidationError"
}

// Error satisfies the builtin error interface
func (e GetAllUsersRespVOValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAllUsersRespVO.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAllUsersRespVOValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAllUsersRespVOValidationError{}

// Validate checks the field values on GetUserByIdReqVO with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetUserByIdReqVO) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserByIdReqVO with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserByIdReqVOMultiError, or nil if none found.
func (m *GetUserByIdReqVO) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserByIdReqVO) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := GetUserByIdReqVOValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetUserByIdReqVOMultiError(errors)
	}

	return nil
}

// GetUserByIdReqVOMultiError is an error wrapping multiple validation errors
// returned by GetUserByIdReqVO.ValidateAll() if the designated constraints
// aren't met.
type GetUserByIdReqVOMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserByIdReqVOMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserByIdReqVOMultiError) AllErrors() []error { return m }

// GetUserByIdReqVOValidationError is the validation error returned by
// GetUserByIdReqVO.Validate if the designated constraints aren't met.
type GetUserByIdReqVOValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserByIdReqVOValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserByIdReqVOValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserByIdReqVOValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserByIdReqVOValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserByIdReqVOValidationError) ErrorName() string { return "GetUserByIdReqVOValidationError" }

// Error satisfies the builtin error interface
func (e GetUserByIdReqVOValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserByIdReqVO.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserByIdReqVOValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserByIdReqVOValidationError{}

// Validate checks the field values on GetUserByIdRespVO with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetUserByIdRespVO) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserByIdRespVO with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserByIdRespVOMultiError, or nil if none found.
func (m *GetUserByIdRespVO) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserByIdRespVO) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetUserByIdRespVOValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetUserByIdRespVOValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetUserByIdRespVOValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetUserByIdRespVOMultiError(errors)
	}

	return nil
}

// GetUserByIdRespVOMultiError is an error wrapping multiple validation errors
// returned by GetUserByIdRespVO.ValidateAll() if the designated constraints
// aren't met.
type GetUserByIdRespVOMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserByIdRespVOMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserByIdRespVOMultiError) AllErrors() []error { return m }

// GetUserByIdRespVOValidationError is the validation error returned by
// GetUserByIdRespVO.Validate if the designated constraints aren't met.
type GetUserByIdRespVOValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserByIdRespVOValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserByIdRespVOValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserByIdRespVOValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserByIdRespVOValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserByIdRespVOValidationError) ErrorName() string {
	return "GetUserByIdRespVOValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserByIdRespVOValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserByIdRespVO.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserByIdRespVOValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserByIdRespVOValidationError{}

// Validate checks the field values on CreateUserReqVO with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateUserReqVO) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateUserReqVO with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateUserReqVOMultiError, or nil if none found.
func (m *CreateUserReqVO) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateUserReqVO) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetUsername()); l < 1 || l > 50 {
		err := CreateUserReqVOValidationError{
			field:  "Username",
			reason: "value length must be between 1 and 50 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_CreateUserReqVO_Email_Pattern.MatchString(m.GetEmail()) {
		err := CreateUserReqVOValidationError{
			field:  "Email",
			reason: "value does not match regex pattern \"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]{2,}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Age != nil {

		if val := m.GetAge(); val < 0 || val > 150 {
			err := CreateUserReqVOValidationError{
				field:  "Age",
				reason: "value must be inside range [0, 150]",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return CreateUserReqVOMultiError(errors)
	}

	return nil
}

// CreateUserReqVOMultiError is an error wrapping multiple validation errors
// returned by CreateUserReqVO.ValidateAll() if the designated constraints
// aren't met.
type CreateUserReqVOMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateUserReqVOMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateUserReqVOMultiError) AllErrors() []error { return m }

// CreateUserReqVOValidationError is the validation error returned by
// CreateUserReqVO.Validate if the designated constraints aren't met.
type CreateUserReqVOValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateUserReqVOValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateUserReqVOValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateUserReqVOValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateUserReqVOValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateUserReqVOValidationError) ErrorName() string { return "CreateUserReqVOValidationError" }

// Error satisfies the builtin error interface
func (e CreateUserReqVOValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateUserReqVO.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateUserReqVOValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateUserReqVOValidationError{}

var _CreateUserReqVO_Email_Pattern = regexp.MustCompile("^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$")

// Validate checks the field values on CreateUserRespVO with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateUserRespVO) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateUserRespVO with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateUserRespVOMultiError, or nil if none found.
func (m *CreateUserRespVO) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateUserRespVO) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateUserRespVOValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateUserRespVOValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateUserRespVOValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateUserRespVOMultiError(errors)
	}

	return nil
}

// CreateUserRespVOMultiError is an error wrapping multiple validation errors
// returned by CreateUserRespVO.ValidateAll() if the designated constraints
// aren't met.
type CreateUserRespVOMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateUserRespVOMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateUserRespVOMultiError) AllErrors() []error { return m }

// CreateUserRespVOValidationError is the validation error returned by
// CreateUserRespVO.Validate if the designated constraints aren't met.
type CreateUserRespVOValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateUserRespVOValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateUserRespVOValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateUserRespVOValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateUserRespVOValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateUserRespVOValidationError) ErrorName() string { return "CreateUserRespVOValidationError" }

// Error satisfies the builtin error interface
func (e CreateUserRespVOValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateUserRespVO.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateUserRespVOValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateUserRespVOValidationError{}

// Validate checks the field values on UpdateUserReqVO with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateUserReqVO) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateUserReqVO with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateUserReqVOMultiError, or nil if none found.
func (m *UpdateUserReqVO) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateUserReqVO) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := UpdateUserReqVOValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Username != nil {

		if l := utf8.RuneCountInString(m.GetUsername()); l < 1 || l > 50 {
			err := UpdateUserReqVOValidationError{
				field:  "Username",
				reason: "value length must be between 1 and 50 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.Email != nil {

		if !_UpdateUserReqVO_Email_Pattern.MatchString(m.GetEmail()) {
			err := UpdateUserReqVOValidationError{
				field:  "Email",
				reason: "value does not match regex pattern \"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]{2,}$\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.Age != nil {

		if val := m.GetAge(); val < 0 || val > 150 {
			err := UpdateUserReqVOValidationError{
				field:  "Age",
				reason: "value must be inside range [0, 150]",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return UpdateUserReqVOMultiError(errors)
	}

	return nil
}

// UpdateUserReqVOMultiError is an error wrapping multiple validation errors
// returned by UpdateUserReqVO.ValidateAll() if the designated constraints
// aren't met.
type UpdateUserReqVOMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateUserReqVOMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateUserReqVOMultiError) AllErrors() []error { return m }

// UpdateUserReqVOValidationError is the validation error returned by
// UpdateUserReqVO.Validate if the designated constraints aren't met.
type UpdateUserReqVOValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUserReqVOValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUserReqVOValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUserReqVOValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUserReqVOValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUserReqVOValidationError) ErrorName() string { return "UpdateUserReqVOValidationError" }

// Error satisfies the builtin error interface
func (e UpdateUserReqVOValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUserReqVO.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUserReqVOValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUserReqVOValidationError{}

var _UpdateUserReqVO_Email_Pattern = regexp.MustCompile("^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$")

// Validate checks the field values on UpdateUserRespVO with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateUserRespVO) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateUserRespVO with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateUserRespVOMultiError, or nil if none found.
func (m *UpdateUserRespVO) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateUserRespVO) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateUserRespVOValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateUserRespVOValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateUserRespVOValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateUserRespVOMultiError(errors)
	}

	return nil
}

// UpdateUserRespVOMultiError is an error wrapping multiple validation errors
// returned by UpdateUserRespVO.ValidateAll() if the designated constraints
// aren't met.
type UpdateUserRespVOMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateUserRespVOMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateUserRespVOMultiError) AllErrors() []error { return m }

// UpdateUserRespVOValidationError is the validation error returned by
// UpdateUserRespVO.Validate if the designated constraints aren't met.
type UpdateUserRespVOValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUserRespVOValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUserRespVOValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUserRespVOValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUserRespVOValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUserRespVOValidationError) ErrorName() string { return "UpdateUserRespVOValidationError" }

// Error satisfies the builtin error interface
func (e UpdateUserRespVOValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUserRespVO.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUserRespVOValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUserRespVOValidationError{}

// Validate checks the field values on DeleteUserReqVO with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteUserReqVO) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteUserReqVO with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteUserReqVOMultiError, or nil if none found.
func (m *DeleteUserReqVO) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteUserReqVO) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := DeleteUserReqVOValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteUserReqVOMultiError(errors)
	}

	return nil
}

// DeleteUserReqVOMultiError is an error wrapping multiple validation errors
// returned by DeleteUserReqVO.ValidateAll() if the designated constraints
// aren't met.
type DeleteUserReqVOMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteUserReqVOMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteUserReqVOMultiError) AllErrors() []error { return m }

// DeleteUserReqVOValidationError is the validation error returned by
// DeleteUserReqVO.Validate if the designated constraints aren't met.
type DeleteUserReqVOValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteUserReqVOValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteUserReqVOValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteUserReqVOValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteUserReqVOValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteUserReqVOValidationError) ErrorName() string { return "DeleteUserReqVOValidationError" }

// Error satisfies the builtin error interface
func (e DeleteUserReqVOValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteUserReqVO.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteUserReqVOValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteUserReqVOValidationError{}

// Validate checks the field values on DeleteUserRespVO with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteUserRespVO) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteUserRespVO with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteUserRespVOMultiError, or nil if none found.
func (m *DeleteUserRespVO) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteUserRespVO) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if len(errors) > 0 {
		return DeleteUserRespVOMultiError(errors)
	}

	return nil
}

// DeleteUserRespVOMultiError is an error wrapping multiple validation errors
// returned by DeleteUserRespVO.ValidateAll() if the designated constraints
// aren't met.
type DeleteUserRespVOMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteUserRespVOMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteUserRespVOMultiError) AllErrors() []error { return m }

// DeleteUserRespVOValidationError is the validation error returned by
// DeleteUserRespVO.Validate if the designated constraints aren't met.
type DeleteUserRespVOValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteUserRespVOValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteUserRespVOValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteUserRespVOValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteUserRespVOValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteUserRespVOValidationError) ErrorName() string { return "DeleteUserRespVOValidationError" }

// Error satisfies the builtin error interface
func (e DeleteUserRespVOValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteUserRespVO.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteUserRespVOValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteUserRespVOValidationError{}

// Validate checks the field values on HealthCheckReqVO with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *HealthCheckReqVO) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HealthCheckReqVO with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// HealthCheckReqVOMultiError, or nil if none found.
func (m *HealthCheckReqVO) ValidateAll() error {
	return m.validate(true)
}

func (m *HealthCheckReqVO) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return HealthCheckReqVOMultiError(errors)
	}

	return nil
}

// HealthCheckReqVOMultiError is an error wrapping multiple validation errors
// returned by HealthCheckReqVO.ValidateAll() if the designated constraints
// aren't met.
type HealthCheckReqVOMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HealthCheckReqVOMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HealthCheckReqVOMultiError) AllErrors() []error { return m }

// HealthCheckReqVOValidationError is the validation error returned by
// HealthCheckReqVO.Validate if the designated constraints aren't met.
type HealthCheckReqVOValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HealthCheckReqVOValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HealthCheckReqVOValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HealthCheckReqVOValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HealthCheckReqVOValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HealthCheckReqVOValidationError) ErrorName() string { return "HealthCheckReqVOValidationError" }

// Error satisfies the builtin error interface
func (e HealthCheckReqVOValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHealthCheckReqVO.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HealthCheckReqVOValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HealthCheckReqVOValidationError{}

// Validate checks the field values on HealthCheckRespVO with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *HealthCheckRespVO) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HealthCheckRespVO with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// HealthCheckRespVOMultiError, or nil if none found.
func (m *HealthCheckRespVO) ValidateAll() error {
	return m.validate(true)
}

func (m *HealthCheckRespVO) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Data

	if len(errors) > 0 {
		return HealthCheckRespVOMultiError(errors)
	}

	return nil
}

// HealthCheckRespVOMultiError is an error wrapping multiple validation errors
// returned by HealthCheckRespVO.ValidateAll() if the designated constraints
// aren't met.
type HealthCheckRespVOMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HealthCheckRespVOMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HealthCheckRespVOMultiError) AllErrors() []error { return m }

// HealthCheckRespVOValidationError is the validation error returned by
// HealthCheckRespVO.Validate if the designated constraints aren't met.
type HealthCheckRespVOValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HealthCheckRespVOValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HealthCheckRespVOValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HealthCheckRespVOValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HealthCheckRespVOValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HealthCheckRespVOValidationError) ErrorName() string {
	return "HealthCheckRespVOValidationError"
}

// Error satisfies the builtin error interface
func (e HealthCheckRespVOValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHealthCheckRespVO.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HealthCheckRespVOValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HealthCheckRespVOValidationError{}
