// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             (unknown)
// source: system/service/v1/user.proto

package servicev1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationUserServiceCreateUser = "/system.service.v1.UserService/CreateUser"
const OperationUserServiceDeleteUser = "/system.service.v1.UserService/DeleteUser"
const OperationUserServiceGetAllUsers = "/system.service.v1.UserService/GetAllUsers"
const OperationUserServiceGetUserById = "/system.service.v1.UserService/GetUserById"
const OperationUserServiceHealthCheck = "/system.service.v1.UserService/HealthCheck"
const OperationUserServiceUpdateUser = "/system.service.v1.UserService/UpdateUser"

type UserServiceHTTPServer interface {
	// CreateUser 创建用户
	CreateUser(context.Context, *CreateUserReqVO) (*CreateUserRespVO, error)
	// DeleteUser 删除用户
	DeleteUser(context.Context, *DeleteUserReqVO) (*DeleteUserRespVO, error)
	// GetAllUsers 获取所有用户
	GetAllUsers(context.Context, *GetAllUsersReqVO) (*GetAllUsersRespVO, error)
	// GetUserById 根据ID获取用户
	GetUserById(context.Context, *GetUserByIdReqVO) (*GetUserByIdRespVO, error)
	// HealthCheck 健康检查
	HealthCheck(context.Context, *HealthCheckReqVO) (*HealthCheckRespVO, error)
	// UpdateUser 更新用户
	UpdateUser(context.Context, *UpdateUserReqVO) (*UpdateUserRespVO, error)
}

func RegisterUserServiceHTTPServer(s *http.Server, srv UserServiceHTTPServer) {
	r := s.Route("/")
	r.GET("/api/users", _UserService_GetAllUsers0_HTTP_Handler(srv))
	r.GET("/api/users/{id}", _UserService_GetUserById0_HTTP_Handler(srv))
	r.POST("/api/users", _UserService_CreateUser0_HTTP_Handler(srv))
	r.PUT("/api/users/{id}", _UserService_UpdateUser0_HTTP_Handler(srv))
	r.DELETE("/api/users/{id}", _UserService_DeleteUser0_HTTP_Handler(srv))
	r.GET("/api/users/health", _UserService_HealthCheck0_HTTP_Handler(srv))
}

func _UserService_GetAllUsers0_HTTP_Handler(srv UserServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetAllUsersReqVO
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserServiceGetAllUsers)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetAllUsers(ctx, req.(*GetAllUsersReqVO))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetAllUsersRespVO)
		return ctx.Result(200, reply)
	}
}

func _UserService_GetUserById0_HTTP_Handler(srv UserServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetUserByIdReqVO
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserServiceGetUserById)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetUserById(ctx, req.(*GetUserByIdReqVO))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetUserByIdRespVO)
		return ctx.Result(200, reply)
	}
}

func _UserService_CreateUser0_HTTP_Handler(srv UserServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateUserReqVO
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserServiceCreateUser)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateUser(ctx, req.(*CreateUserReqVO))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateUserRespVO)
		return ctx.Result(200, reply)
	}
}

func _UserService_UpdateUser0_HTTP_Handler(srv UserServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateUserReqVO
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserServiceUpdateUser)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateUser(ctx, req.(*UpdateUserReqVO))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateUserRespVO)
		return ctx.Result(200, reply)
	}
}

func _UserService_DeleteUser0_HTTP_Handler(srv UserServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteUserReqVO
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserServiceDeleteUser)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteUser(ctx, req.(*DeleteUserReqVO))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteUserRespVO)
		return ctx.Result(200, reply)
	}
}

func _UserService_HealthCheck0_HTTP_Handler(srv UserServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in HealthCheckReqVO
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserServiceHealthCheck)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.HealthCheck(ctx, req.(*HealthCheckReqVO))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*HealthCheckRespVO)
		return ctx.Result(200, reply)
	}
}

type UserServiceHTTPClient interface {
	CreateUser(ctx context.Context, req *CreateUserReqVO, opts ...http.CallOption) (rsp *CreateUserRespVO, err error)
	DeleteUser(ctx context.Context, req *DeleteUserReqVO, opts ...http.CallOption) (rsp *DeleteUserRespVO, err error)
	GetAllUsers(ctx context.Context, req *GetAllUsersReqVO, opts ...http.CallOption) (rsp *GetAllUsersRespVO, err error)
	GetUserById(ctx context.Context, req *GetUserByIdReqVO, opts ...http.CallOption) (rsp *GetUserByIdRespVO, err error)
	HealthCheck(ctx context.Context, req *HealthCheckReqVO, opts ...http.CallOption) (rsp *HealthCheckRespVO, err error)
	UpdateUser(ctx context.Context, req *UpdateUserReqVO, opts ...http.CallOption) (rsp *UpdateUserRespVO, err error)
}

type UserServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewUserServiceHTTPClient(client *http.Client) UserServiceHTTPClient {
	return &UserServiceHTTPClientImpl{client}
}

func (c *UserServiceHTTPClientImpl) CreateUser(ctx context.Context, in *CreateUserReqVO, opts ...http.CallOption) (*CreateUserRespVO, error) {
	var out CreateUserRespVO
	pattern := "/api/users"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserServiceCreateUser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *UserServiceHTTPClientImpl) DeleteUser(ctx context.Context, in *DeleteUserReqVO, opts ...http.CallOption) (*DeleteUserRespVO, error) {
	var out DeleteUserRespVO
	pattern := "/api/users/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationUserServiceDeleteUser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *UserServiceHTTPClientImpl) GetAllUsers(ctx context.Context, in *GetAllUsersReqVO, opts ...http.CallOption) (*GetAllUsersRespVO, error) {
	var out GetAllUsersRespVO
	pattern := "/api/users"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationUserServiceGetAllUsers))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *UserServiceHTTPClientImpl) GetUserById(ctx context.Context, in *GetUserByIdReqVO, opts ...http.CallOption) (*GetUserByIdRespVO, error) {
	var out GetUserByIdRespVO
	pattern := "/api/users/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationUserServiceGetUserById))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *UserServiceHTTPClientImpl) HealthCheck(ctx context.Context, in *HealthCheckReqVO, opts ...http.CallOption) (*HealthCheckRespVO, error) {
	var out HealthCheckRespVO
	pattern := "/api/users/health"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationUserServiceHealthCheck))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *UserServiceHTTPClientImpl) UpdateUser(ctx context.Context, in *UpdateUserReqVO, opts ...http.CallOption) (*UpdateUserRespVO, error) {
	var out UpdateUserRespVO
	pattern := "/api/users/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserServiceUpdateUser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
